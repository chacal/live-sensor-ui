{"version":3,"sources":["ClearButton.js","App.js","index.js"],"names":["ClearButton","type","className","onClick","this","sendEmptyStateToMqttBroker","bind","props","mqttClient","publish","instance","tag","qos","retain","Component","MQTT_BROKERS","name","url","username","password","fixedNumber","propName","event","toFixed","autopilotStateExtractpr","enabled","Math","round","course","PI","rfm69GwStatsExtractor","rssi","ackSent","pirValueExtractor","motionDetected","vccExtractor","vcc","selectedBroker","state","brokerState","brokers","selected","App","sensorValues","localStorage","JSON","parse","startMqttClient","value","onChange","onMqttBrokerChanged","map","broker","idx","onUsernameChanged","onPasswordChanged","renderTemperatures","renderHumidities","renderPressures","renderTankLevels","renderCurrents","renderVoltages","renderElectricEnergyLevels","renderLevelReports","renderAutopilotStates","renderRFM69GwStats","renderPirSensors","e","end","selectedBrokerIdx","target","setState","prevState","newState","R","stringify","updateStateBrokerProp","propValue","selIdx","lens","Mqtt","connect","on","subscribe","onMqttMessage","topic","message","split","key","length","console","warn","toString","renderBasicEvents","valueExtractor","headingText","unitLabel","selectedEvents","tags","tagsArr","Array","isArray","t","includes","eventsByTags","moment","ts","format","undefined","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.10f27578.chunk.js","sourcesContent":["import React, { Component } from 'react'\nimport './ClearButton.css'\n\nclass ClearButton extends Component {\n  render() {\n    return <button type=\"button\" className=\"btn btn-light btn-sm clearButton\" onClick={this.sendEmptyStateToMqttBroker.bind(this)}>Clear</button>\n  }\n\n  sendEmptyStateToMqttBroker() {\n    this.props.mqttClient.publish(`/sensor/${this.props.instance}/${this.props.tag}/state`, null, {qos: 1, retain: true})\n  }\n}\n\n\nexport default ClearButton\n","import React, { Component } from 'react'\nimport './App.css'\nimport Mqtt from 'mqtt'\nimport * as R from 'ramda'\nimport moment from 'moment'\nimport ClearButton from './ClearButton.js'\n\nconst MQTT_BROKERS = [\n  {\n    name: 'Haukkakallio',\n    url: 'wss://haukkakallio.chacal.fi:9883',\n    username: '',\n    password: '',\n  },\n  {\n    name: 'Freya',\n    url: 'ws://freya-raspi.chacal.fi:9883',\n    username: '',\n    password: ''\n  }]\n\nclass App extends Component {\n  constructor(props) {\n    super(props)\n    this.state = { sensorValues: {}, brokerState: getInitialMqttBrokerState() }\n    this.mqttClient = this.startMqttClient(selectedBroker(this.state))\n  }\n\n  render() {\n    return (\n      <div className=\"container\">\n        <div className=\"row justify-content-between\">\n          <div className=\"col-md-auto\">\n            <h3>Sensors</h3>\n          </div>\n          <div className=\"col-md-auto\">\n            <form className=\"form-inline\">\n              <label>Broker:\n                <select className=\"brokerSelect form-control form-control-sm\" name=\"mqttBroker\" value={this.state.brokerState.selected} onChange={this.onMqttBrokerChanged.bind(this)}>\n                  { MQTT_BROKERS.map((broker, idx) => <option key={broker.url} value={idx}>{broker.name}</option>) }\n                </select>\n              </label>\n              <label>\n                User:\n                <input className=\"username form-control form-control-sm\" name=\"username\" value={selectedBroker(this.state).username} onChange={this.onUsernameChanged.bind(this)}/>\n              </label>\n              <label>\n                Password:\n                <input className=\"password form-control form-control-sm\" name=\"password\" type=\"password\" value={selectedBroker(this.state).password} onChange={this.onPasswordChanged.bind(this)}/>\n              </label>\n            </form>\n          </div>\n        </div>\n        <div className=\"row\">\n          {this.renderTemperatures(this.state.sensorValues)}\n          {this.renderHumidities(this.state.sensorValues)}\n          {this.renderPressures(this.state.sensorValues)}\n          {this.renderTankLevels(this.state.sensorValues)}\n          {this.renderCurrents(this.state.sensorValues)}\n          {this.renderVoltages(this.state.sensorValues)}\n          {this.renderElectricEnergyLevels(this.state.sensorValues)}\n          {this.renderLevelReports(this.state.sensorValues)}\n          {this.renderAutopilotStates(this.state.sensorValues)}\n          {this.renderRFM69GwStats(this.state.sensorValues)}\n          {this.renderPirSensors(this.state.sensorValues)}\n        </div>\n      </div>\n    )\n  }\n\n  onMqttBrokerChanged(e) {\n    this.mqttClient.end()\n    const selectedBrokerIdx = e.target.value\n\n    this.setState(prevState => {\n      const newState = {\n        sensorValues: {},\n        brokerState: R.set(R.lensProp('selected'), selectedBrokerIdx, prevState.brokerState)\n      }\n\n      localStorage.brokerState = JSON.stringify(newState.brokerState)\n      this.mqttClient = this.startMqttClient(selectedBroker(newState))\n\n      return newState\n    })\n  }\n\n  onUsernameChanged(e) {\n    this.updateStateBrokerProp('username', e.target.value)\n  }\n\n  onPasswordChanged(e) {\n    this.updateStateBrokerProp('password', e.target.value)\n  }\n\n  updateStateBrokerProp(propName, propValue) {\n    this.setState(prevState => {\n      const selIdx = prevState.brokerState.selected\n      const lens = R.lensPath(['brokerState', 'brokers', selIdx, propName])\n      const newState = R.set(lens, propValue, prevState)\n      localStorage.brokerState = JSON.stringify(newState.brokerState)\n      return newState\n    })\n  }\n\n  startMqttClient(broker) {\n    const mqttClient = Mqtt.connect(broker.url, R.pick(['username', 'password'], broker))\n    mqttClient.on('connect', () => {\n      mqttClient.subscribe('/sensor/+/+/state')\n      mqttClient.on('message', this.onMqttMessage.bind(this))\n    })\n    return mqttClient\n  }\n\n  onMqttMessage(topic, message) {\n    const [, , instance, tag,] = topic.split('/')\n    const key = instance + '_' + tag\n\n    if(message.length === 0) {\n      this.setState(prevState => ({sensorValues: R.omit([key], prevState.sensorValues)}))\n    } else {\n      try {\n        const event = JSON.parse(message)\n        this.setState(prevState => ({sensorValues: R.mergeRight(prevState.sensorValues, {[key]: event})}))\n      } catch(e) {\n        console.warn('Exception when handling MQTT message:', message.toString(), e)\n      }\n    }\n  }\n\n  renderTemperatures(sensorValues) { return this.renderBasicEvents(sensorValues, ['t', 'm'], fixedNumber('temperature'), 'Temperature', '°C') }\n  renderHumidities(sensorValues) { return this.renderBasicEvents(sensorValues, ['h', 'm'], fixedNumber('humidity'), 'Humidity', '%H') }\n  renderPressures(sensorValues) { return this.renderBasicEvents(sensorValues, ['p', 'm'], fixedNumber('pressure'), 'Pressure', 'mbar') }\n  renderTankLevels(sensorValues) { return this.renderBasicEvents(sensorValues, 'w', fixedNumber('tankLevel'), 'Tank level', '%') }\n  renderCurrents(sensorValues) { return this.renderBasicEvents(sensorValues, 'c', fixedNumber('current'), 'Current', 'A') }\n  renderVoltages(sensorValues) { return this.renderBasicEvents(sensorValues, 'v', vccExtractor, 'Voltage', 'V') }\n  renderElectricEnergyLevels(sensorValues) { return this.renderBasicEvents(sensorValues, 'e', fixedNumber('ampHours'), 'Electric energy level', 'Ah') }\n  renderLevelReports(sensorValues) { return this.renderBasicEvents(sensorValues, 'r', R.prop('level'), 'Level Report', '') }\n  renderAutopilotStates(sensorValues) { return this.renderBasicEvents(sensorValues, 'b', autopilotStateExtractpr, 'Autopilot', '') }\n  renderRFM69GwStats(sensorValues) { return this.renderBasicEvents(sensorValues, 's', rfm69GwStatsExtractor, 'RFM69 GW Stats', '') }\n  renderPirSensors(sensorValues) { return this.renderBasicEvents(sensorValues, 'k', pirValueExtractor, 'PIR', '') }\n\n  renderBasicEvents(sensorValues, tag, valueExtractor, headingText, unitLabel) {\n    const selectedEvents = eventsByTags(sensorValues, tag)\n\n    return selectedEvents.length > 0 ?\n      <div className=\"col-12\">\n        <h4>{headingText}</h4>\n        <table className=\"table table-striped table-bordered text-right basic-event\">\n          <tbody>{\n            selectedEvents.map(e =>\n              <tr key={e.instance}>\n                <td className=\"instance\">{e.instance}</td>\n                <td className=\"value\">{valueExtractor(e) + ' ' + unitLabel}</td>\n                <td className=\"vcc\">{vccExtractor(e) + ' V'}</td>\n                <td className=\"rssi\">{e.rssi ? e.rssi + ' dBm' : '-'}</td>\n                <td className=\"timestamp\">{moment(e.ts).format('HH:mm:ss')}</td>\n                <td className=\"clear\"><ClearButton tag={e.tag} instance={e.instance} mqttClient={this.mqttClient}/></td>\n              </tr>)\n          }</tbody>\n        </table>\n      </div>\n      : undefined\n  }\n}\n\nfunction eventsByTags(sensorValues, tags) {\n  const tagsArr = Array.isArray(tags) ? tags : [tags]\n  return R.pipe(\n    R.values,\n    R.filter(R.propSatisfies(t => tagsArr.includes(t), 'tag')),\n    R.sortBy(R.prop('instance'))\n  )(sensorValues)\n}\n\nfunction fixedNumber(propName) { return event => typeof event[propName] === 'number' ? event[propName].toFixed(2) : 'N/A' }\nfunction autopilotStateExtractpr(event) { return event.enabled ? `Engaged: ${Math.round(radsToDeg(event.course))}°M` : 'Disengaged' }\nfunction rfm69GwStatsExtractor(event) { return event.rssi + 'dB (ACK: ' + event.ackSent + ')'}\nfunction pirValueExtractor(event) { return event.motionDetected ? 'Triggered' : 'Not triggered'}\nfunction vccExtractor(event) { return event.vcc ? (event.vcc / 1000).toFixed(3) : 'N/A' }\n\nfunction getInitialMqttBrokerState() {\n  return localStorage.brokerState ? JSON.parse(localStorage.brokerState) : {\n    brokers: MQTT_BROKERS,\n    selected: 0\n  }\n}\n\nfunction selectedBroker(state) {\n  return state.brokerState.brokers[state.brokerState.selected]\n}\n\nfunction radsToDeg(radians) { return radians * 180 / Math.PI }\n\nexport default App\n\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport App from './App'\nimport 'bootstrap/dist/css/bootstrap.css'\nimport './index.css'\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root')\n)\n"],"sourceRoot":""}